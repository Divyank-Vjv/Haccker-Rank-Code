WAy 01 ---- Using Stack


#!/bin/python3

import math
import os
import random
import re
import sys

class SinglyLinkedListNode:
    def __init__(self, node_data):
        self.data = node_data
        self.next = None

class SinglyLinkedList:
    def __init__(self):
        self.head = None
        self.tail = None

    def insert_node(self, node_data):
        node = SinglyLinkedListNode(node_data)

        if not self.head:
            self.head = node
        else:
            self.tail.next = node


        self.tail = node

def print_singly_linked_list(node, sep, fptr):
    while node:
        fptr.write(str(node.data))

        node = node.next

        if node:
            fptr.write(sep)


def getNode(llist, positionFromTail):
    # Write your code here
    temp=llist
    stack=[]
    while temp:
        stack.append(temp.data)
        temp=temp.next
    for _ in range(positionFromTail):
        t=stack.pop()
    return stack.pop()
        

if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')

    tests = int(input())

    for tests_itr in range(tests):
        llist_count = int(input())

        llist = SinglyLinkedList()

        for _ in range(llist_count):
            llist_item = int(input())
            llist.insert_node(llist_item)

        position = int(input())

        result = getNode(llist.head, position)

        fptr.write(str(result) + '\n')

    fptr.close()


Way 02 ---- Using pointer 


def getNode(llist, positionFromTail):
	ptr1,ptr2=llist,llist
	for _ in range(positionFromTail):
		ptr1=ptr1.next
	while ptr1.next!=None:
		ptr1=ptr1.next
		ptr2=ptr2.next
	return ptr2.data
	