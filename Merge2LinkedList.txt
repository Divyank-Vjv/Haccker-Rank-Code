Way 01 -----

#!/bin/python3

import math
import os
import random
import re
import sys

class SinglyLinkedListNode:
    def __init__(self, node_data):
        self.data = node_data
        self.next = None

class SinglyLinkedList:
    def __init__(self):
        self.head = None
        self.tail = None

    def insert_node(self, node_data):
        node = SinglyLinkedListNode(node_data)

        if not self.head:
            self.head = node
        else:
            self.tail.next = node


        self.tail = node

def print_singly_linked_list(node, sep, fptr):
    while node:
        fptr.write(str(node.data))

        node = node.next

        if node:
            fptr.write(sep)


def mergeLists(head1, head2):
    if head1 and head2==None:
        return head1
    elif head2 and head1==None:
        return head2
    else:
        temp2,temp1=head2,head1
        temp3=SinglyLinkedList()
        while temp2 and temp1:
            if temp2.data>=temp1.data:
                temp3.insert_node(temp1.data)
                temp1=temp1.next
            elif temp2.data<temp1.data:
                temp3.insert_node(temp2.data)
                temp2=temp2.next
        if temp1 and temp2==None:
            temp3.tail.next=temp1
        elif temp2 and temp1==None:
            temp3.tail.next=temp2
        return temp3.head
                
    

if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')

    tests = int(input())

    for tests_itr in range(tests):
        llist1_count = int(input())

        llist1 = SinglyLinkedList()

        for _ in range(llist1_count):
            llist1_item = int(input())
            llist1.insert_node(llist1_item)
            
        llist2_count = int(input())

        llist2 = SinglyLinkedList()

        for _ in range(llist2_count):
            llist2_item = int(input())
            llist2.insert_node(llist2_item)

        llist3 = mergeLists(llist1.head, llist2.head)

        print_singly_linked_list(llist3, ' ', fptr)
        fptr.write('\n')

    fptr.close()


Way 02 ----- Recursion Way

def mergeList(llist1,llist2):
	#BAse CASe
	if llist1 and llist2==None:
		return llist1
	if llist2 and llist1==None:
		return llist2
	if llist ==None and llist2==None:
		return None

	# REcursion
	if llist1.data<llist2.data:
		temp=llist1
		temp.next=self.mergeList(llist1.next,llist2)
	else:
		temp=llist2
		temp.next=self.mergeList(llist1,llist2.next)
	return temp


Way 03 ------

Def mergeList(llist1,llist2):
	dummy=SinglyLinkedList()
	tail=dummy
	while llist1 and llist2:
		if llist1.data<llist2.data:
			tail.next=llist1
		else:
			tail.next=llist2
		tail=tail.next
		if llist1 and llist2==None:
			tailnext=llist1
		if llist2 and llist1==None:
			tail.next=llist2
	return dummy.next